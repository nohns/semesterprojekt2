// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/pairing_service.proto

package pairingv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/nohns/proto/pairing/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PairingServiceName is the fully-qualified name of the PairingService service.
	PairingServiceName = "pairing.v1.PairingService"
)

// PairingServiceClient is a client for the pairing.v1.PairingService service.
type PairingServiceClient interface {
	Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error)
}

// NewPairingServiceClient constructs a client for the pairing.v1.PairingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPairingServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PairingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pairingServiceClient{
		register: connect_go.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+"/pairing.v1.PairingService/Register",
			opts...,
		),
	}
}

// pairingServiceClient implements PairingServiceClient.
type pairingServiceClient struct {
	register *connect_go.Client[v1.RegisterRequest, v1.RegisterResponse]
}

// Register calls pairing.v1.PairingService.Register.
func (c *pairingServiceClient) Register(ctx context.Context, req *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// PairingServiceHandler is an implementation of the pairing.v1.PairingService service.
type PairingServiceHandler interface {
	Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error)
}

// NewPairingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPairingServiceHandler(svc PairingServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/pairing.v1.PairingService/Register", connect_go.NewUnaryHandler(
		"/pairing.v1.PairingService/Register",
		svc.Register,
		opts...,
	))
	return "/pairing.v1.PairingService/", mux
}

// UnimplementedPairingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPairingServiceHandler struct{}

func (UnimplementedPairingServiceHandler) Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pairing.v1.PairingService.Register is not implemented"))
}
