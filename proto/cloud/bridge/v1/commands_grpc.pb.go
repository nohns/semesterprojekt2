// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/commands.proto

package bridge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmdServiceClient is the client API for CmdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmdServiceClient interface {
	// Register the bridge with the cloud
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Streams actions from the cloud (server) to the bridge (client) and the bridge can send
	// answers back if it needs to. Therefore the opposite naming
	StreamCommands(ctx context.Context, in *StreamCommandsRequest, opts ...grpc.CallOption) (CmdService_StreamCommandsClient, error)
}

type cmdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmdServiceClient(cc grpc.ClientConnInterface) CmdServiceClient {
	return &cmdServiceClient{cc}
}

func (c *cmdServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/dk.nohns.cloud.bridge.CmdService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdServiceClient) StreamCommands(ctx context.Context, in *StreamCommandsRequest, opts ...grpc.CallOption) (CmdService_StreamCommandsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CmdService_ServiceDesc.Streams[0], "/dk.nohns.cloud.bridge.CmdService/StreamCommands", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmdServiceStreamCommandsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CmdService_StreamCommandsClient interface {
	Recv() (*StreamCommand, error)
	grpc.ClientStream
}

type cmdServiceStreamCommandsClient struct {
	grpc.ClientStream
}

func (x *cmdServiceStreamCommandsClient) Recv() (*StreamCommand, error) {
	m := new(StreamCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CmdServiceServer is the server API for CmdService service.
// All implementations should embed UnimplementedCmdServiceServer
// for forward compatibility
type CmdServiceServer interface {
	// Register the bridge with the cloud
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Streams actions from the cloud (server) to the bridge (client) and the bridge can send
	// answers back if it needs to. Therefore the opposite naming
	StreamCommands(*StreamCommandsRequest, CmdService_StreamCommandsServer) error
}

// UnimplementedCmdServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCmdServiceServer struct {
}

func (UnimplementedCmdServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCmdServiceServer) StreamCommands(*StreamCommandsRequest, CmdService_StreamCommandsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCommands not implemented")
}

// UnsafeCmdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmdServiceServer will
// result in compilation errors.
type UnsafeCmdServiceServer interface {
	mustEmbedUnimplementedCmdServiceServer()
}

func RegisterCmdServiceServer(s grpc.ServiceRegistrar, srv CmdServiceServer) {
	s.RegisterService(&CmdService_ServiceDesc, srv)
}

func _CmdService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dk.nohns.cloud.bridge.CmdService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdService_StreamCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamCommandsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmdServiceServer).StreamCommands(m, &cmdServiceStreamCommandsServer{stream})
}

type CmdService_StreamCommandsServer interface {
	Send(*StreamCommand) error
	grpc.ServerStream
}

type cmdServiceStreamCommandsServer struct {
	grpc.ServerStream
}

func (x *cmdServiceStreamCommandsServer) Send(m *StreamCommand) error {
	return x.ServerStream.SendMsg(m)
}

// CmdService_ServiceDesc is the grpc.ServiceDesc for CmdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CmdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dk.nohns.cloud.bridge.CmdService",
	HandlerType: (*CmdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _CmdService_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCommands",
			Handler:       _CmdService_StreamCommands_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/commands.proto",
}
