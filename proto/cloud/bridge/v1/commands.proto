syntax="proto3";

package dk.nohns.cloud.bridge;

option go_package = "github.com/nohns/semesterprojekt2/proto/gen/go/cloud/bridge/v1;bridge";

service CmdService {
    // Register the bridge with the cloud
    rpc Register(RegisterRequest) returns (RegisterResponse) {}

    // Streams actions from the cloud (server) to the bridge (client) and the bridge can send 
    // answers back if it needs to. Therefore the opposite naming
    rpc StreamCommands(StreamCommandsRequest) returns (stream StreamCommand) {}
}

/* ------------ *
 * rpc Register *
 * ------------ */

message RegisterRequest {
    bytes csr = 1;
}

message RegisterResponse {
    string bridgeId = 1;
    bytes cert = 2;
}

/* ------------------ *
 * rpc StreamCommands *
 * ------------------ */

message StreamCommandsRequest {}

// StreamCommand contains the type of command protobuf and the actual command protobuf as binary
message StreamCommand {
    string type = 1;
    bytes cmd = 2;

    message EngageLock {
        string lockId = 1;
    }
    message DisengageLock {
        string lockId = 1;
    }
    message ReadLockState {
        string lockId = 1;
    }
}

