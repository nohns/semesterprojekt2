// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bridge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	StreamQueries(ctx context.Context, opts ...grpc.CallOption) (QueryService_StreamQueriesClient, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) StreamQueries(ctx context.Context, opts ...grpc.CallOption) (QueryService_StreamQueriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryService_ServiceDesc.Streams[0], "/dk.nohns.cloud.bridge.QueryService/StreamQueries", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceStreamQueriesClient{stream}
	return x, nil
}

type QueryService_StreamQueriesClient interface {
	Send(*StreamResponse) error
	Recv() (*StreamQuery, error)
	grpc.ClientStream
}

type queryServiceStreamQueriesClient struct {
	grpc.ClientStream
}

func (x *queryServiceStreamQueriesClient) Send(m *StreamResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queryServiceStreamQueriesClient) Recv() (*StreamQuery, error) {
	m := new(StreamQuery)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations should embed UnimplementedQueryServiceServer
// for forward compatibility
type QueryServiceServer interface {
	StreamQueries(QueryService_StreamQueriesServer) error
}

// UnimplementedQueryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (UnimplementedQueryServiceServer) StreamQueries(QueryService_StreamQueriesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamQueries not implemented")
}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_StreamQueries_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueryServiceServer).StreamQueries(&queryServiceStreamQueriesServer{stream})
}

type QueryService_StreamQueriesServer interface {
	Send(*StreamQuery) error
	Recv() (*StreamResponse, error)
	grpc.ServerStream
}

type queryServiceStreamQueriesServer struct {
	grpc.ServerStream
}

func (x *queryServiceStreamQueriesServer) Send(m *StreamQuery) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queryServiceStreamQueriesServer) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dk.nohns.cloud.bridge.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamQueries",
			Handler:       _QueryService_StreamQueries_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cloud/bridge/v1/queries.proto",
}
